{"version":3,"sources":["Movie.js","App.js","index.js"],"names":["Movie","id","year","title","summary","poster","genres","className","src","alt","map","genre","index","key","App","state","isLoading","movies","getMovies","a","axios","get","data","console","log","setState","this","movie","medium_cover_image","React","Component","ReactDOM","render","document","getElementById"],"mappings":"0TA8BeA,MA3Bf,YAA0D,EAA1CC,GAA2C,IAAvCC,EAAsC,EAAtCA,KAAMC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,QAASC,EAAgB,EAAhBA,OAAQC,EAAQ,EAARA,OAC9C,OACI,yBAAKC,UAAU,SACX,yBAAKC,IAAKH,EAAQI,IAAKN,IACvB,yBAAKI,UAAU,eACX,wBAAIA,UAAU,gBAAgBJ,GAC9B,wBAAII,UAAU,eAAeL,GAC7B,wBAAIK,UAAU,UACbD,EAAOI,KAAI,SAACC,EAAOC,GAAR,OACR,wBAAIC,IAAKD,EAAOL,UAAU,iBAAiBI,OAG/C,uBAAGJ,UAAU,kBAAkBH,MCwFhCU,G,kNA/CbC,MAAQ,CACNC,WAAY,EACZC,OAAS,I,EAEXC,U,sBAAY,8BAAAC,EAAA,sEAOMC,IAAMC,IAAI,4DAPhB,gBAIEJ,EAJF,EACHK,KACEA,KAEGL,OAIZM,QAAQC,IAAIP,GACZ,EAAKQ,SAAS,CAACR,SAASD,WAAW,IATzB,2C,kEAYRU,KAAKR,c,+BAGA,IAAD,EACsBQ,KAAKX,MAA1BC,EADD,EACCA,UAAWC,EADZ,EACYA,OAClB,OACE,6BAASV,UAAU,aACdS,EACG,yBAAKT,UAAU,UACX,0BAAMA,UAAU,gBAAhB,eAGJ,yBAAKA,UAAU,UACZU,EAAOP,KAAI,SAAAiB,GACN,OAAQ,kBAAC,EAAD,CAAOd,IAAKc,EAAM1B,GACdA,GAAI0B,EAAM1B,GACVC,KAAMyB,EAAMzB,KACZC,MAAOwB,EAAMxB,MACbC,QAASuB,EAAMvB,QACfC,OAAQsB,EAAMC,mBACdtB,OAAQqB,EAAMrB,kB,GArC9BuB,IAAMC,YClDxBC,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,W","file":"static/js/main.ce5fd06c.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./Movie.css\";\r\nfunction Movie({id, year, title, summary, poster, genres}){\r\n    return (\r\n        <div className=\"movie\">\r\n            <img src={poster} alt={title}/>\r\n            <div className=\"movie__data\">\r\n                <h3 className=\"movie__title\">{title}</h3>\r\n                <h5 className=\"movie__year\">{year}</h5>\r\n                <ul className=\"genres\">\r\n                {genres.map((genre, index) => (\r\n                    <li key={index} className=\"genres__genre\">{genre}</li>\r\n                ))}\r\n                </ul>\r\n                <p className=\"movie__summary\">{summary}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nMovie.propTypes = {\r\n    id : PropTypes.number.isRequired,\r\n    year : PropTypes.number.isRequired,\r\n    title : PropTypes.string.isRequired,\r\n    summary : PropTypes.string.isRequired,\r\n    poster : PropTypes.string.isRequired,\r\n    genres : PropTypes.arrayOf(PropTypes.string).isRequired\r\n}\r\nexport default Movie;","import React from 'react';\nimport axios from \"axios\";\nimport Movie from \"./Movie\";\nimport \"./App.css\";\n// React : Component를 사용해  HTML을 작성하는 경우 사용.\n//  App : parent component\n//  Food : child component\n\n//function App() {// Component : HTML을 반환하는 함수.\n/*  return (\n    <div className=\"App\">\n       {foodILike.map((dish, index) => \n       <Food key={index} name={dish.name} picture={dish.image}/>)}\n      // fav 라는 key의 속성에 kimchi 라는 value를 줌.\n    </div> // jsx : javascript와 HTML의 조합\n    \n  ); */\n  /*\n  return(\n    <div>\n      {console.log(foodILike.map(renderFood))};\n      {foodILike.map(renderFood)}\n    </div>);\n}\n*/\n\n//class App extends React.Component{//function component 대신 class component를 사용하는 이유 : state때문.\n  /*state = { // state : Object. component의 data를 넣는 공간.(dynamic data)\n    count : 0\n  }\n\n  add = () => {\n      this.setState(current => ({count : current.count + 1}));\n  };\n  minus = () => {\n    this.setState(current => ({count : current.count - 1}));\n  };\n  */\n  /*\n  수행 메서드 순서(component life cycle) : \n    mounting :  생성자 -> render() -> componentDidMount()\n    update(내가 눌러 상태 바뀔 때) : getDerivedStateFromPorps() -> shouldComponentUpdate() -> render() -> \n    unmounting : \n   */\n  /*\n   render(){ // class컴포넌트는 자동으로 render()를 호출한다.\n    return (<div>\n              <h1>The Number is : {this.state.count}</h1>\n              <button onClick={this.add}>Add</button>\n              <button onClick={this.minus}>Minus</button>\n            </div>);\n  }\n}\n*/\n\nclass App extends React.Component{\n  state = {\n    isLoading : true,\n    movies : []\n  }\n  getMovies = async () => {\n    const {data : \n            {data :\n              {\n                movies\n              }\n            }\n          } = await axios.get(\"https://yts-proxy.now.sh/list_movies.json?sort_by=rating\");\n    console.log(movies);\n    this.setState({movies , isLoading: false});\n  }\n  componentDidMount(){\n      this.getMovies();\n  }\n\n  render(){\n    const {isLoading, movies} = this.state;\n    return (\n      <section className=\"container\">\n          {isLoading ?\n              <div className=\"loader\">\n                  <span className=\"loader__text\">Loading...</span>\n              </div>\n              : \n              <div className=\"movies\">\n                {movies.map(movie =>{\n                      return (<Movie key={movie.id}\n                                  id={movie.id}\n                                  year={movie.year}\n                                  title={movie.title}\n                                  summary={movie.summary}\n                                  poster={movie.medium_cover_image}\n                                  genres={movie.genres} />\n                      );\n                    }\n                  )\n                } \n              </div>\n          }\n      </section>\n    );\n  }\n}\nexport default App;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n    <App />,// <App/> = component : Data를 보여주는 것.\n  document.getElementById('root')\n);"],"sourceRoot":""}